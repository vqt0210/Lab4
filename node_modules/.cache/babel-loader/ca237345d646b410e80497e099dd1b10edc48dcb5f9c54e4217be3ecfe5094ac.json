{"ast":null,"code":"import * as React from 'react';\nconst LEFT = \"Left\";\nconst RIGHT = \"Right\";\nconst UP = \"Up\";\nconst DOWN = \"Down\";\n\n/* global document */\nconst defaultProps = {\n  delta: 10,\n  preventScrollOnSwipe: false,\n  rotationAngle: 0,\n  trackMouse: false,\n  trackTouch: true,\n  swipeDuration: Infinity,\n  touchEventOptions: {\n    passive: true\n  }\n};\nconst initialState = {\n  first: true,\n  initial: [0, 0],\n  start: 0,\n  swiping: false,\n  xy: [0, 0]\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\nfunction getDirection(absX, absY, deltaX, deltaY) {\n  if (absX > absY) {\n    if (deltaX > 0) {\n      return RIGHT;\n    }\n    return LEFT;\n  } else if (deltaY > 0) {\n    return DOWN;\n  }\n  return UP;\n}\nfunction rotateXYByAngle(pos, angle) {\n  if (angle === 0) return pos;\n  const angleInRadians = Math.PI / 180 * angle;\n  const x = pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n  const y = pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n  return [x, y];\n}\nfunction getHandlers(set, handlerProps) {\n  const onStart = event => {\n    const isTouch = \"touches\" in event;\n    // if more than a single touch don't track, for now...\n    if (isTouch && event.touches.length > 1) return;\n    set((state, props) => {\n      // setup mouse listeners on document to track swipe since swipe can leave container\n      if (props.trackMouse && !isTouch) {\n        document.addEventListener(mouseMove, onMove);\n        document.addEventListener(mouseUp, onUp);\n      }\n      const {\n        clientX,\n        clientY\n      } = isTouch ? event.touches[0] : event;\n      const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      props.onTouchStartOrOnMouseDown && props.onTouchStartOrOnMouseDown({\n        event\n      });\n      return Object.assign(Object.assign(Object.assign({}, state), initialState), {\n        initial: xy.slice(),\n        xy,\n        start: event.timeStamp || 0\n      });\n    });\n  };\n  const onMove = event => {\n    set((state, props) => {\n      const isTouch = \"touches\" in event;\n      // Discount a swipe if additional touches are present after\n      // a swipe has started.\n      if (isTouch && event.touches.length > 1) {\n        return state;\n      }\n      // if swipe has exceeded duration stop tracking\n      if (event.timeStamp - state.start > props.swipeDuration) {\n        return state.swiping ? Object.assign(Object.assign({}, state), {\n          swiping: false\n        }) : state;\n      }\n      const {\n        clientX,\n        clientY\n      } = isTouch ? event.touches[0] : event;\n      const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      const deltaX = x - state.xy[0];\n      const deltaY = y - state.xy[1];\n      const absX = Math.abs(deltaX);\n      const absY = Math.abs(deltaY);\n      const time = (event.timeStamp || 0) - state.start;\n      const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n      const vxvy = [deltaX / (time || 1), deltaY / (time || 1)];\n      const dir = getDirection(absX, absY, deltaX, deltaY);\n      // if swipe is under delta and we have not started to track a swipe: skip update\n      const delta = typeof props.delta === \"number\" ? props.delta : props.delta[dir.toLowerCase()] || defaultProps.delta;\n      if (absX < delta && absY < delta && !state.swiping) return state;\n      const eventData = {\n        absX,\n        absY,\n        deltaX,\n        deltaY,\n        dir,\n        event,\n        first: state.first,\n        initial: state.initial,\n        velocity,\n        vxvy\n      };\n      // call onSwipeStart if present and is first swipe event\n      eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n      // call onSwiping if present\n      props.onSwiping && props.onSwiping(eventData);\n      // track if a swipe is cancelable (handler for swiping or swiped(dir) exists)\n      // so we can call preventDefault if needed\n      let cancelablePageSwipe = false;\n      if (props.onSwiping || props.onSwiped || props[`onSwiped${dir}`]) {\n        cancelablePageSwipe = true;\n      }\n      if (cancelablePageSwipe && props.preventScrollOnSwipe && props.trackTouch && event.cancelable) {\n        event.preventDefault();\n      }\n      return Object.assign(Object.assign({}, state), {\n        // first is now always false\n        first: false,\n        eventData,\n        swiping: true\n      });\n    });\n  };\n  const onEnd = event => {\n    set((state, props) => {\n      let eventData;\n      if (state.swiping && state.eventData) {\n        // if swipe is less than duration fire swiped callbacks\n        if (event.timeStamp - state.start < props.swipeDuration) {\n          eventData = Object.assign(Object.assign({}, state.eventData), {\n            event\n          });\n          props.onSwiped && props.onSwiped(eventData);\n          const onSwipedDir = props[`onSwiped${eventData.dir}`];\n          onSwipedDir && onSwipedDir(eventData);\n        }\n      } else {\n        props.onTap && props.onTap({\n          event\n        });\n      }\n      props.onTouchEndOrOnMouseUp && props.onTouchEndOrOnMouseUp({\n        event\n      });\n      return Object.assign(Object.assign(Object.assign({}, state), initialState), {\n        eventData\n      });\n    });\n  };\n  const cleanUpMouse = () => {\n    // safe to just call removeEventListener\n    document.removeEventListener(mouseMove, onMove);\n    document.removeEventListener(mouseUp, onUp);\n  };\n  const onUp = e => {\n    cleanUpMouse();\n    onEnd(e);\n  };\n  /**\n   * The value of passive on touchMove depends on `preventScrollOnSwipe`:\n   * - true => { passive: false }\n   * - false => { passive: true } // Default\n   *\n   * NOTE: When preventScrollOnSwipe is true, we attempt to call preventDefault to prevent scroll.\n   *\n   * props.touchEventOptions can also be set for all touch event listeners,\n   * but for `touchmove` specifically when `preventScrollOnSwipe` it will\n   * supersede and force passive to false.\n   *\n   */\n  const attachTouch = (el, props) => {\n    let cleanup = () => {};\n    if (el && el.addEventListener) {\n      const baseOptions = Object.assign(Object.assign({}, defaultProps.touchEventOptions), props.touchEventOptions);\n      // attach touch event listeners and handlers\n      const tls = [[touchStart, onStart, baseOptions],\n      // preventScrollOnSwipe option supersedes touchEventOptions.passive\n      [touchMove, onMove, Object.assign(Object.assign({}, baseOptions), props.preventScrollOnSwipe ? {\n        passive: false\n      } : {})], [touchEnd, onEnd, baseOptions]];\n      tls.forEach(([e, h, o]) => el.addEventListener(e, h, o));\n      // return properly scoped cleanup method for removing listeners, options not required\n      cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n    }\n    return cleanup;\n  };\n  const onRef = el => {\n    // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n    // ignore null here\n    if (el === null) return;\n    set((state, props) => {\n      // if the same DOM el as previous just return state\n      if (state.el === el) return state;\n      const addState = {};\n      // if new DOM el clean up old DOM and reset cleanUpTouch\n      if (state.el && state.el !== el && state.cleanUpTouch) {\n        state.cleanUpTouch();\n        addState.cleanUpTouch = void 0;\n      }\n      // only attach if we want to track touch\n      if (props.trackTouch && el) {\n        addState.cleanUpTouch = attachTouch(el, props);\n      }\n      // store event attached DOM el for comparison, clean up, and re-attachment\n      return Object.assign(Object.assign(Object.assign({}, state), {\n        el\n      }), addState);\n    });\n  };\n  // set ref callback to attach touch event listeners\n  const output = {\n    ref: onRef\n  };\n  // if track mouse attach mouse down listener\n  if (handlerProps.trackMouse) {\n    output.onMouseDown = onStart;\n  }\n  return [output, attachTouch];\n}\nfunction updateTransientState(state, props, previousProps, attachTouch) {\n  // if trackTouch is off or there is no el, then remove handlers if necessary and exit\n  if (!props.trackTouch || !state.el) {\n    if (state.cleanUpTouch) {\n      state.cleanUpTouch();\n    }\n    return Object.assign(Object.assign({}, state), {\n      cleanUpTouch: undefined\n    });\n  }\n  // trackTouch is on, so if there are no handlers attached, attach them and exit\n  if (!state.cleanUpTouch) {\n    return Object.assign(Object.assign({}, state), {\n      cleanUpTouch: attachTouch(state.el, props)\n    });\n  }\n  // trackTouch is on and handlers are already attached, so if preventScrollOnSwipe changes value,\n  // remove and reattach handlers (this is required to update the passive option when attaching\n  // the handlers)\n  if (props.preventScrollOnSwipe !== previousProps.preventScrollOnSwipe || props.touchEventOptions.passive !== previousProps.touchEventOptions.passive) {\n    state.cleanUpTouch();\n    return Object.assign(Object.assign({}, state), {\n      cleanUpTouch: attachTouch(state.el, props)\n    });\n  }\n  return state;\n}\nfunction useSwipeable(options) {\n  const {\n    trackMouse\n  } = options;\n  const transientState = React.useRef(Object.assign({}, initialState));\n  const transientProps = React.useRef(Object.assign({}, defaultProps));\n  // track previous rendered props\n  const previousProps = React.useRef(Object.assign({}, transientProps.current));\n  previousProps.current = Object.assign({}, transientProps.current);\n  // update current render props & defaults\n  transientProps.current = Object.assign(Object.assign({}, defaultProps), options);\n  // Force defaults for config properties\n  let defaultKey;\n  for (defaultKey in defaultProps) {\n    if (transientProps.current[defaultKey] === void 0) {\n      transientProps.current[defaultKey] = defaultProps[defaultKey];\n    }\n  }\n  const [handlers, attachTouch] = React.useMemo(() => getHandlers(stateSetter => transientState.current = stateSetter(transientState.current, transientProps.current), {\n    trackMouse\n  }), [trackMouse]);\n  transientState.current = updateTransientState(transientState.current, transientProps.current, previousProps.current, attachTouch);\n  return handlers;\n}\nexport { DOWN, LEFT, RIGHT, UP, useSwipeable };","map":{"version":3,"names":["LEFT","RIGHT","UP","DOWN","defaultProps","delta","preventScrollOnSwipe","rotationAngle","trackMouse","trackTouch","swipeDuration","Infinity","touchEventOptions","passive","initialState","first","initial","start","swiping","xy","mouseMove","mouseUp","touchEnd","touchMove","touchStart","getDirection","absX","absY","deltaX","deltaY","rotateXYByAngle","pos","angle","angleInRadians","Math","PI","x","cos","sin","y","getHandlers","set","handlerProps","onStart","event","isTouch","touches","length","state","props","document","addEventListener","onMove","onUp","clientX","clientY","onTouchStartOrOnMouseDown","Object","assign","slice","timeStamp","abs","time","velocity","sqrt","vxvy","dir","toLowerCase","eventData","onSwipeStart","onSwiping","cancelablePageSwipe","onSwiped","cancelable","preventDefault","onEnd","onSwipedDir","onTap","onTouchEndOrOnMouseUp","cleanUpMouse","removeEventListener","e","attachTouch","el","cleanup","baseOptions","tls","forEach","h","o","onRef","addState","cleanUpTouch","output","ref","onMouseDown","updateTransientState","previousProps","undefined","useSwipeable","options","transientState","React","useRef","transientProps","current","defaultKey","handlers","useMemo","stateSetter"],"sources":["C:\\Users\\quoct\\Desktop\\new-lab4\\Tiktok\\node_modules\\react-swipeable\\src\\types.ts","C:\\Users\\quoct\\Desktop\\new-lab4\\Tiktok\\node_modules\\react-swipeable\\src\\index.ts"],"sourcesContent":["import * as React from \"react\";\n\nexport const LEFT = \"Left\";\nexport const RIGHT = \"Right\";\nexport const UP = \"Up\";\nexport const DOWN = \"Down\";\nexport type HandledEvents = React.MouseEvent | TouchEvent | MouseEvent;\nexport type Vector2 = [number, number];\nexport type SwipeDirections =\n  | typeof LEFT\n  | typeof RIGHT\n  | typeof UP\n  | typeof DOWN;\nexport interface SwipeEventData {\n  /**\n   * Absolute displacement of swipe in x. Math.abs(deltaX);\n   */\n  absX: number;\n  /**\n   * Absolute displacement of swipe in y. Math.abs(deltaY);\n   */\n  absY: number;\n  /**\n   * Displacement of swipe in x. (current.x - initial.x)\n   */\n  deltaX: number;\n  /**\n   * Displacement of swipe in y. (current.y - initial.y)\n   */\n  deltaY: number;\n  /**\n   * Direction of swipe - Left | Right | Up | Down\n   */\n  dir: SwipeDirections;\n  /**\n   * Source event.\n   */\n  event: HandledEvents;\n  /**\n   * True for the first event of a tracked swipe.\n   */\n  first: boolean;\n  /**\n   * Location where swipe started - [x, y].\n   */\n  initial: Vector2;\n  /**\n   * \"Absolute velocity\" (speed) - √(absX^2 + absY^2) / time\n   */\n  velocity: number;\n  /**\n   * Velocity per axis - [ deltaX/time, deltaY/time ]\n   */\n  vxvy: Vector2;\n}\n\nexport type SwipeCallback = (eventData: SwipeEventData) => void;\nexport type TapCallback = ({ event }: { event: HandledEvents }) => void;\n\nexport type SwipeableDirectionCallbacks = {\n  /**\n   * Called after a DOWN swipe\n   */\n  onSwipedDown: SwipeCallback;\n  /**\n   * Called after a LEFT swipe\n   */\n  onSwipedLeft: SwipeCallback;\n  /**\n   * Called after a RIGHT swipe\n   */\n  onSwipedRight: SwipeCallback;\n  /**\n   * Called after a UP swipe\n   */\n  onSwipedUp: SwipeCallback;\n};\n\nexport type SwipeableCallbacks = SwipeableDirectionCallbacks & {\n  /**\n   * Called at start of a tracked swipe.\n   */\n  onSwipeStart: SwipeCallback;\n  /**\n   * Called after any swipe.\n   */\n  onSwiped: SwipeCallback;\n  /**\n   * Called for each move event during a tracked swipe.\n   */\n  onSwiping: SwipeCallback;\n  /**\n   * Called after a tap. A touch under the min distance, `delta`.\n   */\n  onTap: TapCallback;\n  /**\n   * Called for `touchstart` and `mousedown`.\n   */\n  onTouchStartOrOnMouseDown: TapCallback;\n  /**\n   * Called for `touchend` and `mouseup`.\n   */\n  onTouchEndOrOnMouseUp: TapCallback;\n};\n\n// Configuration Options\nexport type ConfigurationOptionDelta =\n  | number\n  | { [key in Lowercase<SwipeDirections>]?: number };\n\nexport interface ConfigurationOptions {\n  /**\n   * Min distance(px) before a swipe starts. **Default**: `10`\n   */\n  delta: ConfigurationOptionDelta;\n  /**\n   * Prevents scroll during swipe in most cases. **Default**: `false`\n   */\n  preventScrollOnSwipe: boolean;\n  /**\n   * Set a rotation angle. **Default**: `0`\n   */\n  rotationAngle: number;\n  /**\n   * Track mouse input. **Default**: `false`\n   */\n  trackMouse: boolean;\n  /**\n   * Track touch input. **Default**: `true`\n   */\n  trackTouch: boolean;\n  /**\n   * Allowable duration of a swipe (ms). **Default**: `Infinity`\n   */\n  swipeDuration: number;\n  /**\n   * Options for touch event listeners\n   */\n  touchEventOptions: { passive: boolean };\n}\n\nexport type SwipeableProps = Partial<SwipeableCallbacks & ConfigurationOptions>;\n\nexport type SwipeablePropsWithDefaultOptions = Partial<SwipeableCallbacks> &\n  ConfigurationOptions;\n\nexport interface SwipeableHandlers {\n  ref(element: HTMLElement | null): void;\n  onMouseDown?(event: React.MouseEvent): void;\n}\n\nexport type SwipeableState = {\n  cleanUpTouch?: () => void;\n  el?: HTMLElement;\n  eventData?: SwipeEventData;\n  first: boolean;\n  initial: Vector2;\n  start: number;\n  swiping: boolean;\n  xy: Vector2;\n};\n\nexport type StateSetter = (\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions\n) => SwipeableState;\nexport type Setter = (stateSetter: StateSetter) => void;\nexport type AttachTouch = (\n  el: HTMLElement,\n  props: SwipeablePropsWithDefaultOptions\n) => () => void;\n","/* global document */\nimport * as React from \"react\";\nimport {\n  AttachTouch,\n  SwipeDirections,\n  DOWN,\n  SwipeEventData,\n  HandledEvents,\n  LEFT,\n  RIGHT,\n  Setter,\n  ConfigurationOptions,\n  SwipeableDirectionCallbacks,\n  SwipeableHandlers,\n  SwipeableProps,\n  SwipeablePropsWithDefaultOptions,\n  SwipeableState,\n  SwipeCallback,\n  TapCallback,\n  UP,\n  Vector2,\n} from \"./types\";\n\nexport {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN,\n  SwipeDirections,\n  SwipeEventData,\n  SwipeableDirectionCallbacks,\n  SwipeCallback,\n  TapCallback,\n  SwipeableHandlers,\n  SwipeableProps,\n  Vector2,\n};\n\nconst defaultProps: ConfigurationOptions = {\n  delta: 10,\n  preventScrollOnSwipe: false,\n  rotationAngle: 0,\n  trackMouse: false,\n  trackTouch: true,\n  swipeDuration: Infinity,\n  touchEventOptions: { passive: true },\n};\nconst initialState: SwipeableState = {\n  first: true,\n  initial: [0, 0],\n  start: 0,\n  swiping: false,\n  xy: [0, 0],\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\n\nfunction getDirection(\n  absX: number,\n  absY: number,\n  deltaX: number,\n  deltaY: number\n): SwipeDirections {\n  if (absX > absY) {\n    if (deltaX > 0) {\n      return RIGHT;\n    }\n    return LEFT;\n  } else if (deltaY > 0) {\n    return DOWN;\n  }\n  return UP;\n}\n\nfunction rotateXYByAngle(pos: Vector2, angle: number): Vector2 {\n  if (angle === 0) return pos;\n  const angleInRadians = (Math.PI / 180) * angle;\n  const x =\n    pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n  const y =\n    pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n  return [x, y];\n}\n\nfunction getHandlers(\n  set: Setter,\n  handlerProps: { trackMouse: boolean | undefined }\n): [\n  {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown?: (event: React.MouseEvent) => void;\n  },\n  AttachTouch\n] {\n  const onStart = (event: HandledEvents) => {\n    const isTouch = \"touches\" in event;\n    // if more than a single touch don't track, for now...\n    if (isTouch && event.touches.length > 1) return;\n\n    set((state, props) => {\n      // setup mouse listeners on document to track swipe since swipe can leave container\n      if (props.trackMouse && !isTouch) {\n        document.addEventListener(mouseMove, onMove);\n        document.addEventListener(mouseUp, onUp);\n      }\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n\n      props.onTouchStartOrOnMouseDown &&\n        props.onTouchStartOrOnMouseDown({ event });\n\n      return {\n        ...state,\n        ...initialState,\n        initial: xy.slice() as Vector2,\n        xy,\n        start: event.timeStamp || 0,\n      };\n    });\n  };\n\n  const onMove = (event: HandledEvents) => {\n    set((state, props) => {\n      const isTouch = \"touches\" in event;\n      // Discount a swipe if additional touches are present after\n      // a swipe has started.\n      if (isTouch && event.touches.length > 1) {\n        return state;\n      }\n\n      // if swipe has exceeded duration stop tracking\n      if (event.timeStamp - state.start > props.swipeDuration) {\n        return state.swiping ? { ...state, swiping: false } : state;\n      }\n\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      const deltaX = x - state.xy[0];\n      const deltaY = y - state.xy[1];\n      const absX = Math.abs(deltaX);\n      const absY = Math.abs(deltaY);\n      const time = (event.timeStamp || 0) - state.start;\n      const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n      const vxvy: Vector2 = [deltaX / (time || 1), deltaY / (time || 1)];\n\n      const dir = getDirection(absX, absY, deltaX, deltaY);\n\n      // if swipe is under delta and we have not started to track a swipe: skip update\n      const delta =\n        typeof props.delta === \"number\"\n          ? props.delta\n          : props.delta[dir.toLowerCase() as Lowercase<SwipeDirections>] ||\n            defaultProps.delta;\n      if (absX < delta && absY < delta && !state.swiping) return state;\n\n      const eventData = {\n        absX,\n        absY,\n        deltaX,\n        deltaY,\n        dir,\n        event,\n        first: state.first,\n        initial: state.initial,\n        velocity,\n        vxvy,\n      };\n\n      // call onSwipeStart if present and is first swipe event\n      eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n\n      // call onSwiping if present\n      props.onSwiping && props.onSwiping(eventData);\n\n      // track if a swipe is cancelable (handler for swiping or swiped(dir) exists)\n      // so we can call preventDefault if needed\n      let cancelablePageSwipe = false;\n      if (\n        props.onSwiping ||\n        props.onSwiped ||\n        props[`onSwiped${dir}` as keyof SwipeableDirectionCallbacks]\n      ) {\n        cancelablePageSwipe = true;\n      }\n\n      if (\n        cancelablePageSwipe &&\n        props.preventScrollOnSwipe &&\n        props.trackTouch &&\n        event.cancelable\n      ) {\n        event.preventDefault();\n      }\n\n      return {\n        ...state,\n        // first is now always false\n        first: false,\n        eventData,\n        swiping: true,\n      };\n    });\n  };\n\n  const onEnd = (event: HandledEvents) => {\n    set((state, props) => {\n      let eventData: SwipeEventData | undefined;\n      if (state.swiping && state.eventData) {\n        // if swipe is less than duration fire swiped callbacks\n        if (event.timeStamp - state.start < props.swipeDuration) {\n          eventData = { ...state.eventData, event };\n          props.onSwiped && props.onSwiped(eventData);\n\n          const onSwipedDir =\n            props[\n              `onSwiped${eventData.dir}` as keyof SwipeableDirectionCallbacks\n            ];\n          onSwipedDir && onSwipedDir(eventData);\n        }\n      } else {\n        props.onTap && props.onTap({ event });\n      }\n\n      props.onTouchEndOrOnMouseUp && props.onTouchEndOrOnMouseUp({ event });\n\n      return { ...state, ...initialState, eventData };\n    });\n  };\n\n  const cleanUpMouse = () => {\n    // safe to just call removeEventListener\n    document.removeEventListener(mouseMove, onMove);\n    document.removeEventListener(mouseUp, onUp);\n  };\n\n  const onUp = (e: HandledEvents) => {\n    cleanUpMouse();\n    onEnd(e);\n  };\n\n  /**\n   * The value of passive on touchMove depends on `preventScrollOnSwipe`:\n   * - true => { passive: false }\n   * - false => { passive: true } // Default\n   *\n   * NOTE: When preventScrollOnSwipe is true, we attempt to call preventDefault to prevent scroll.\n   *\n   * props.touchEventOptions can also be set for all touch event listeners,\n   * but for `touchmove` specifically when `preventScrollOnSwipe` it will\n   * supersede and force passive to false.\n   *\n   */\n  const attachTouch: AttachTouch = (el, props) => {\n    let cleanup = () => {};\n    if (el && el.addEventListener) {\n      const baseOptions = {\n        ...defaultProps.touchEventOptions,\n        ...props.touchEventOptions,\n      };\n      // attach touch event listeners and handlers\n      const tls: [\n        typeof touchStart | typeof touchMove | typeof touchEnd,\n        (e: HandledEvents) => void,\n        { passive: boolean }\n      ][] = [\n        [touchStart, onStart, baseOptions],\n        // preventScrollOnSwipe option supersedes touchEventOptions.passive\n        [\n          touchMove,\n          onMove,\n          {\n            ...baseOptions,\n            ...(props.preventScrollOnSwipe ? { passive: false } : {}),\n          },\n        ],\n        [touchEnd, onEnd, baseOptions],\n      ];\n      tls.forEach(([e, h, o]) => el.addEventListener(e, h, o));\n      // return properly scoped cleanup method for removing listeners, options not required\n      cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n    }\n    return cleanup;\n  };\n\n  const onRef = (el: HTMLElement | null) => {\n    // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n    // ignore null here\n    if (el === null) return;\n    set((state, props) => {\n      // if the same DOM el as previous just return state\n      if (state.el === el) return state;\n\n      const addState: { cleanUpTouch?: () => void } = {};\n      // if new DOM el clean up old DOM and reset cleanUpTouch\n      if (state.el && state.el !== el && state.cleanUpTouch) {\n        state.cleanUpTouch();\n        addState.cleanUpTouch = void 0;\n      }\n      // only attach if we want to track touch\n      if (props.trackTouch && el) {\n        addState.cleanUpTouch = attachTouch(el, props);\n      }\n\n      // store event attached DOM el for comparison, clean up, and re-attachment\n      return { ...state, el, ...addState };\n    });\n  };\n\n  // set ref callback to attach touch event listeners\n  const output: { ref: typeof onRef; onMouseDown?: typeof onStart } = {\n    ref: onRef,\n  };\n\n  // if track mouse attach mouse down listener\n  if (handlerProps.trackMouse) {\n    output.onMouseDown = onStart;\n  }\n\n  return [output, attachTouch];\n}\n\nfunction updateTransientState(\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions,\n  previousProps: SwipeablePropsWithDefaultOptions,\n  attachTouch: AttachTouch\n) {\n  // if trackTouch is off or there is no el, then remove handlers if necessary and exit\n  if (!props.trackTouch || !state.el) {\n    if (state.cleanUpTouch) {\n      state.cleanUpTouch();\n    }\n\n    return {\n      ...state,\n      cleanUpTouch: undefined,\n    };\n  }\n\n  // trackTouch is on, so if there are no handlers attached, attach them and exit\n  if (!state.cleanUpTouch) {\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  // trackTouch is on and handlers are already attached, so if preventScrollOnSwipe changes value,\n  // remove and reattach handlers (this is required to update the passive option when attaching\n  // the handlers)\n  if (\n    props.preventScrollOnSwipe !== previousProps.preventScrollOnSwipe ||\n    props.touchEventOptions.passive !== previousProps.touchEventOptions.passive\n  ) {\n    state.cleanUpTouch();\n\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  return state;\n}\n\nexport function useSwipeable(options: SwipeableProps): SwipeableHandlers {\n  const { trackMouse } = options;\n  const transientState = React.useRef({ ...initialState });\n  const transientProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...defaultProps,\n  });\n\n  // track previous rendered props\n  const previousProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...transientProps.current,\n  });\n  previousProps.current = { ...transientProps.current };\n\n  // update current render props & defaults\n  transientProps.current = {\n    ...defaultProps,\n    ...options,\n  };\n  // Force defaults for config properties\n  let defaultKey: keyof ConfigurationOptions;\n  for (defaultKey in defaultProps) {\n    if (transientProps.current[defaultKey] === void 0) {\n      (transientProps.current[defaultKey] as any) = defaultProps[defaultKey];\n    }\n  }\n\n  const [handlers, attachTouch] = React.useMemo(\n    () =>\n      getHandlers(\n        (stateSetter) =>\n          (transientState.current = stateSetter(\n            transientState.current,\n            transientProps.current\n          )),\n        { trackMouse }\n      ),\n    [trackMouse]\n  );\n\n  transientState.current = updateTransientState(\n    transientState.current,\n    transientProps.current,\n    previousProps.current,\n    attachTouch\n  );\n\n  return handlers;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}